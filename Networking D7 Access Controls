Access Controls
Host
Default Policies
    Explicit - precisely and clearly expressed
    Implicit - implied or understood

Block listing vs Allow Listing
    Block-Listing (Formerly Black-List)
        Implicit ACCEPT
        Explicit DENY
    Allow-Listing (Formerly White-List)
        Implicit DENY
        Explicit ACCEPT

Operation modes
  Routed Mode
  Transparent Mode

Firewall Filtering Methods
    Stateless (Packet) Filtering (L3+4)
    Stateful Inspection (L4)
    Circuit-Level (L5)
    Application Layer (L7)
    Next Generation (NGFW) (L7)

Firewall Types
    Software - typically host-based
    Hardware - typically network-based
    Cloud - provided as a service

Netfilter Paradigm
    tables - contain chains
    chains - contain rules
    rules - dictate what to match and what actions to perform on packets when packets match a rule
-----------------------------------------------------------------------------
Configure IP Tables
Table of IPTables
    filter - default table. Provides packet filtering.
    nat - used to translate private ←→ public address and ports.
    mangle - provides special packet alteration. Can modify various fields header fields.
    raw - used to configure exemptions from connection tracking.
    security - used for Mandatory Access Control (MAC) networking rules.

Chains of IPTables
    PREROUTING - packets entering NIC before routing
    INPUT - packets to localhost after routing
    FORWARD - packets routed from one NIC to another. (needs to be enabled)
    OUTPUT - packets from localhost to be routed
    POSTROUTING - packets leaving system after routing

  Chains assigned to each table
      filter - INPUT, FORWARD, and OUTPUT
      nat - PREROUTING, POSTROUTING, INPUT, and OUTPUT
      mangle - All chains
      raw - PREROUTING and OUTPUT
      security - INPUT, FORWARD, and OUTPUT

IPTables options
  -t - Specifies the table. (Default is filter)
  -A - Appends a rule to the end of the list or below specified rule
  -I - Inserts the rule at the top of the list or above specified rule
  -R - Replaces a rule at the specified rule number
  -D - Deletes a rule at the specified rule number
  -F - Flushes the rules in the selected chain- *****BEFORE FLUSHING, CHANGE THE DEFAULT POLICY TO ACCEPT*****
  -L - Lists the rules in the selected chain using standard formatting
  -S - Lists the rules in the selected chain without standard formatting
  -P - Sets the default policy for the selected chain
  -n - Disables inverse lookups when listing rules
  --line-numbers - Prints the rule number when listing rules
  -p - Specifies the protocol
  -i - Specifies the input interface
  -o - Specifies the output interface
  --sport - Specifies the source port
  --dport - Specifies the destination port
  -s - Specifies the source IP
  -d - Specifies the destination IP
  -j - Specifies the jump target action

IPTables Syntax
iptables -t [table] -A [chain] [rules] -j [action]
    Table: filter*, nat, mangle
    Chain: INPUT, OUTPUT, PREROUTING, POSTROUTING, FORWARD
    -j is where accept/deny is added
      ACCEPT - Allow the packet
      REJECT - Deny the packet (send an ICMP reponse)
      DROP - Deny the packet (send no response)

    -i [ iface ]
    -o [ iface ]
    -s [ ip.add | network/CIDR ]
    -d [ ip.add | network/CIDR ]

    -p icmp [ --icmp-type type# { /code# } ]
    -p tcp [ --sport | --dport { port1 |  port1:port2 } ]
    -p tcp [ --tcp-flags SYN,ACK,PSH,RST,FIN,URG,ALL,NONE ]
    -p udp [ --sport | --dport { port1 | port1:port2 } ]

    -m to enable iptables extensions:
      -m state --state NEW,ESTABLISHED,RELATED,UNTRACKED,INVALID
      -m mac [ --mac-source | --mac-destination ] [mac]
      -p [tcp|udp] -m multiport [ --dports | --sports | --ports { port1 | port1:port15 } ]
      -m bpf --bytecode [ 'bytecode' ]
      -m iprange [ --src-range | --dst-range { ip1-ip2 } ]
-----------------------------------------------------------------------------
Configure NFTables
Families
  ip - IPv4 packets
  ip6 - IPv6 packets
  inet - IPv4 and IPv6 packets
  arp - layer 2
  bridge - processing traffic/packets traversing bridges.
  netdev - allows for user classification of packets - nftables passes up to the networking stack (no counterpart in iptables)

Hooks
  ingress - netdev only
  prerouting
  input
  forward
  output
  postrouting

Chain Types
  filter - to filter packets - can be used with arp, bridge, ip, ip6, and inet families
  route - to reroute packets - can be used with ip and ipv6 families only
  nat - used for Network Address Translation - used with ip and ip6 table families only

NFTables Syntax
1. Create the Table - 
    nft add table [family] [table] 
      Table is a user given name

2. Create the Base Chain
    nft add chain [family] [table] [chain] { type [type] hook [hook]
        priority [priority] \; policy [policy] \;}
      * [chain] = User defined name for the chain.
      * [type] =  can be filter, route or nat.
      * [hook] = prerouting, ingress, input, forward, output or
               postrouting.
      * [priority] = user provided integer. Lower number = higher
                   priority. default = 0. Use "--" before
                   negative numbers.
      * ; [policy] ; = set policy for the chain. Can be
                    accept (default) or drop.
       Use "\" to escape the ";" in bash


3.Create a Rule in the chain
  nft add rule [family] [table] [chain] [matches (matches)] [statement]
    * [matches] = typically protocol headers(i.e. ip, ip6, tcp,
                udp, icmp, ether, etc)
    * (matches) = these are specific to the [matches] field.
    * [statement] = action performed when packet is matched. Some
                  examples are: log, accept, drop, reject,
                  counter, nat (dnat, snat, masquerade)
    

  Rule match options
    ip [ saddr | daddr { ip | ip1-ip2 | ip/CIDR | ip1, ip2, ip3 } ]
    tcp flags { syn, ack, psh, rst, fin }
    tcp [ sport | dport { port1 | port1-port2 | port1, port2, port3 } ]
    udp [ sport| dport { port1 | port1-port2 | port1, port2, port3 } ]
    icmp [ type | code { type# | code# } ]
    ct state { new, established, related, invalid, untracked }
    iif [iface]
    oif [iface]












