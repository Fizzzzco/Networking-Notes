 File Transfer
TFTP - Trivial File Transfer Protocol
    RFC 1350 Rev2
    UDP transport
    Extremely small and very simple communication
    No terminal communication
    Insecure (no authentication or encryption)
    No directory services
    Used often for technologies such as BOOTP and PXE
FTP
File Transfer Protocol
    RFC 959
    Uses 2 separate TCP connections
    Control Connection (21) / Data Connection (20*)
    Authentication in clear-text
    Insecure in default configuration
    Has directory services
    Anonymous login
    Interactive with the machine you are connecting to

    Active
    Passive

FTPS
File Transfer Protocol Secure
    Adds SSL/TLS encryption to FTP
    Interactive terminal access
    Explicit Mode: ports 20/21*
        Option for Encryption
    Implicit Mode: ports 989/990*
        Encrytion assumed
SFTP
Secure File Transfer Protocol
    TCP transport (port 22)
    Uses symmetric and asymmetric encryption
    Adds FTP like services to SSH
    Authentication through sign in (username and password) or with SSH key
    Interactive terminal access

SCP
Secure Copy Protocol
    TCP Transport (port 22)
    Uses symmetric and asymmetric encryption
    Authentication through sign in (username and password) or with SSH key
    Non-Interactive

SCP options
.  - Present working directory
-v - verbose mode
-P - alternate port
-r - recursively copy an entire directory
-3 - 3-way copy - This command will take a file from one host, and instead send it to a different specified station

Syntax
  Download syntax - scp student@172.16.82.106:secretstuff.txt /home/student
  Upload Syntax - scp secretstuff.txt student@172.16.82.106:/home/student
  Copy a file from a remote host to a separate host - scp -3 student@172.16.82.106:/home/student/secretstuff.txt student@172.16.82.112:/home/student

  Recursive upload - scp -r folder/ student@172.16.82.106:
  Recursive download - scp -r student@172.16.82.106:folder/ .

  Altenate SSHD
  Download - scp -P 1111 student@172.16.82.106:secretstuff.txt .
  Upload - scp -P 1111 secretstuff.txt student@172.16.82.106:

  SCP Through a tunnel
  Create a local port forward tunnel - ssh student@172.16.82.106 -L 1111:localhost:22 -NT
  See Alternate SSHD for same Up/Down Syntax

  Create a Dynamic Port Forward - ssh student@172.16.82.106 -D 9050 -NT
  Download - proxychains scp student@localhost:secretstuff.txt .
  Upload - proxychains scp secretstuff.txt student@localhost:
  

Netcat can also be used to transfer files
    Can be used for the following:
        inbound and outbound connections, TCP/UDP, to or from any port
        troubleshooting network connections
        sending/receiving data (insecurely)
        port scanning (similar to -sT in Nmap)

Client to Listener File Transfer:
Listener (Receive File) - nc -lvp 9001 > newfile.txt
Client (Sends File) - nc 172.16.82.106 9001 < file.txt

Listener to Client
Listener (Sends File) - nc -lvp 9001 < file.txt
Client (Receive File) - nc 172.16.82.106 9001 > newfile.txt













